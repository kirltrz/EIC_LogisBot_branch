// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.0
// LVGL version: 9.1.0
// Project name: EIC_LogisBot

#include "ui.h"
#include <HWT101.h>
#include "LED.h"
#include "servo.h"
#include "servoEx.h"
#include "motor.h"
#include "motorEx.h"
#include "sensor.h"
#include "uniMotionCtrl.h"
#include "globalValue.h"
#include "myTaskManager.h"

void hwt101zero(lv_event_t *e)
{
	HWT101.toZero();
}

void stopAllServoAndMotor(lv_event_t *e)
{
	stopAllServo();
	motorWrite(0, 2, 0, 0, 0);
	motorWrite(1, 2, 0, 0, 0);
	motorWrite(2, 2, 0, 0, 0);
	motorWrite(3, 2, 0, 0, 0);
	emergencyStop = true;
	// vTaskSuspend(mainSequenceHandle);
}

void servo1Plus(lv_event_t *e)
{
	int readData = readServo(1);
	writeServo(1, (readData + 100 > 4096) ? 4096 : readData + 100);
}

void servo1Minus(lv_event_t *e)
{
	int readData = readServo(1);
	writeServo(1, (readData - 100 < 0) ? 0 : readData - 100);
}

void servo2Plus(lv_event_t *e)
{
	int readData = readServo(2);
	writeServo(2, (readData + 100 > 4096) ? 4096 : readData + 100);
}

void servo2Minus(lv_event_t *e)
{
	int readData = readServo(2);
	writeServo(2, (readData - 100 < 0) ? 0 : readData - 100);
}

void servo3Plus(lv_event_t *e)
{
	int readData = readServo(3);
	writeServo(3, (readData + 100 > 4096) ? 4096 : readData + 100);
}

void servo3Minus(lv_event_t *e)
{
	int readData = readServo(3);
	writeServo(3, (readData - 100 < 0) ? 0 : readData - 100);
}

void servoClawOpen(lv_event_t *e)
{
	setClaw(false);
}

void servoClawClose(lv_event_t *e)
{
	setClaw(true);
}

void refreshButton(lv_event_t *e)
{
	lv_arc_set_value(ui_servo0Arc, readServo(0));
}

void servo0Adjust(lv_event_t *e)
{
	writeServo(0, lv_arc_get_value(ui_servo0Arc));
}

void servo0Left(lv_event_t *e)
{
	int readData = readServo(0);
	writeServo(0, (readData + 100 > 4096) ? 4096 : readData + 100);
}

void servo0Right(lv_event_t *e)
{
	int readData = readServo(0);
	writeServo(0, (readData - 100 < 0) ? 0 : readData - 100);
}

void startupFunc(lv_event_t *e)
{
	HWT101.toZero();
	uniYawAdjustOn=true;
	//yawAdjustOn = true; // yaw角矫正开始执行
	startup = true;		// 指示mainSequence开始执行
}

void actionGroupStart(lv_event_t *e)
{
	xTaskCreate(
		[](void *ptr)
		{
			servoAction(lv_dropdown_get_selected(ui_actionGroupList));
			vTaskDelete(NULL);
		},
		"actionGroupStart(lvgl button) task",
		2048,
		NULL,
		3,
		NULL);
}

void restartFunc(lv_event_t *e)
{
	esp_restart(); // 句柄啥的麻烦死了，还特么有野指针，不如直接软件复位来得快
}

void servo0CalibrationOfs(lv_event_t *e)
{
	for (int i = 0; i < 4; i++)
		servo.CalibrationOfs(i);
}

void pidSwitch(lv_event_t *e)
{
	yawAdjustOn = lv_obj_has_state(ui_Switch1, LV_STATE_CHECKED);
}

void mode_0_button(lv_event_t *e)
{
	writeRPI(0);
}
void mode_1_button(lv_event_t *e)
{
	writeRPI(1);
}

void mode_2_button(lv_event_t *e)
{
	writeRPI(2);
}

void mode_3_button(lv_event_t *e)
{
	writeRPI(3);
}

void LEDfunction(lv_event_t *e)
{
	LED(lv_obj_has_state(ui_Switch2, LV_STATE_CHECKED));
}

void caliPosButton1(lv_event_t *e)
{
	caliPos(320, 267, 0);
}

void caliPosButton2(lv_event_t *e)
{
	caliPos(320, 267, 1);
}

void resumeMainSequence(lv_event_t *e)
{
	emergencyStop = false;
	// vTaskResume(mainSequenceHandle);
}

void uniCtrlChange(lv_event_t *e)
{
	uniCtrl(lv_slider_get_value(ui_univx) * 0.01, lv_slider_get_value(ui_univy) * 0.01, lv_slider_get_value(ui_uniomega) * 0.01);
}

void uniCtrlToZero(lv_event_t *e)
{
	lv_slider_set_value(ui_univx, 0, LV_ANIM_OFF);
	lv_slider_set_value(ui_univy, 0, LV_ANIM_OFF);
	lv_slider_set_value(ui_uniomega, 0, LV_ANIM_OFF);
	uniCtrl(lv_slider_get_value(ui_univx) * 0.01, lv_slider_get_value(ui_univy) * 0.01, lv_slider_get_value(ui_uniomega) * 0.01);
}

void uniMoveButton(lv_event_t *e)
{
	uniMove(YP, 1000, 1.0, 50, true, true, false);
	// uniMove(YP, 2400, 0.2, 5);
}

void uniSwerveButton(lv_event_t *e)
{
	// uniMove(YP, 500, 0.2, 5);
	//uniSwerve(0, 90.0, 0.2, 1, true);
	uniMove(YP, 500, 0.5, 25, true, false, false);
	uniSwerve(YP,90.0,0.5,1.0,false);
	uniMove(YP,500,0.5,25,true,true,false);
}
